{"version":3,"sources":["../src/Location.jsx"],"names":[],"mappings":"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","file":"Location.js","sourcesContent":["'use strict';\n\nimport React from 'react';\nimport ReactDom from 'react-dom';\nimport Awesomplete from 'awesomplete';\nimport Promise from 'promise-polyfill';\nimport google from './vendor/google';\n\nconst NO_MATCHING = 'Unrecognised {{value}}, please check and re-enter.';\nconst DEFAULT_COUNTRY = 'US';\n\nvar compose = function () {\n  var fns = arguments;\n\n  return function (result) {\n    for (let i = fns.length - 1; i >= 0; i--) {\n      result = fns[i].call(this, result);\n    }\n    return result;\n  };\n};\n\nexport default class Location extends React.Component {\n\n  render() {\n    return (\n      <input\n        type='text'\n        className={ this.props.className }\n        placeholder={ this.props.placeholder || 'Type your location here.' }\n      />\n    );\n  }\n\n  componentWillMount() {\n    this._googlePredictions = [];\n    this._country = this.props.country || DEFAULT_COUNTRY;\n    this._noMatching = this.props.noMatching || NO_MATCHING;\n  }\n\n  componentDidMount() {\n    var input;\n    var config = {\n      minChars: 1,\n      keepListItems: false,\n      sort: function () { return 0; },\n      item: function (text, input) {\n        return Awesomplete.$.create('li', {\n          innerHTML: text.replace(\n            RegExp(Awesomplete.$.regExpEscape(input.trim()), 'gi'),\n            '<mark>$&</mark>'\n          ),\n          'aria-selected': 'false'\n        });\n      }\n    };\n\n    input = ReactDom.findDOMNode(this);\n    this._autocomplete = new Awesomplete(input, config);\n\n    input.addEventListener(\n      'awesomplete-selectcomplete',\n      this._handleAutocompleteSelect.bind(this)\n    );\n    input.addEventListener(\n      'keyup',\n      this._handleInputChange.bind(this)\n    );\n  }\n\n  updateCountry(country) {\n    this._country = country;\n  }\n\n  _handleInputChange(event) {\n    var value = this._getInputValue();\n    var updateAutocomplete = compose(\n      this._autocomplete.evaluate.bind(this._autocomplete),\n      (list) => this._autocomplete.list = list,\n      (list) => list.map((item) => item.description),\n      (results) => this._googlePredictions = results\n    );\n    var fail = compose(\n      updateAutocomplete,\n      (text) => [{ description: text }],\n      (text) => {\n        return this._noMatching.replace('{{value}}', text);\n      }\n    );\n    var navKeys = [38, 40, 13, 27];\n    var isItNavKey = navKeys.indexOf(event.keyCode) >= 0;\n\n    if (!isItNavKey) {\n      this._getPredictions(value).then(updateAutocomplete, fail);\n    }\n  }\n\n  _handleAutocompleteSelect() {\n    var value = this._getInputValue();\n    var find = (list) => {\n      let l = list.filter(item => item.description === value);\n\n      return l.length > 0 ? l[0] : false;\n    };\n    var validate = item => item && item.place_id ? item.place_id : false;\n    var getPlaceId = compose(validate, find);\n    var success = (location) => {\n      this.props.onLocationSet && this.props.onLocationSet({\n        description: value,\n        coords: {\n          lat: location.lat(),\n          lng: location.lng()\n        }\n      });\n    };\n\n    this._getCoordinates(getPlaceId(this._googlePredictions)).then(success);\n  }\n\n  _getInputValue() {\n    return ReactDom.findDOMNode(this).value;\n  }\n\n  _getPredictions(text) {\n    var service = (this.props.google || google).createAutocompleteService();\n    var isThereAnyText = !!text;\n\n    if (isThereAnyText) {\n      return new Promise((resolve, reject) => {\n        service.getPlacePredictions({\n          input: text,\n          componentRestrictions: { country: this._country },\n          types: ['(regions)']\n        }, (result) => {\n          if (result !== null) {\n            resolve(result);\n          } else {\n            reject(text);\n          }\n        });\n      });\n    }\n    return new Promise((resolve, reject) => {});\n  }\n\n  _getCoordinates(placeId) {\n    var geocoder = (this.props.google || google).createGeocoder();\n\n    return new Promise((resolve, reject) => {\n      geocoder.geocode({ placeId: placeId }, (results, status) => {\n        if (status === 'OK' && results && results.length > 0) {\n          resolve(results[0].geometry.location);\n        } else {\n          reject(false);\n        }\n      });\n    });\n  }\n\n};\n\nLocation.propTypes = {\n  onLocationSet: React.PropTypes.func,\n  className: React.PropTypes.string,\n  placeholder: React.PropTypes.string,\n  country: React.PropTypes.string,\n  noMatching: React.PropTypes.string,\n  google: React.PropTypes.object\n};\n"]}